{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Probabaility ratio encoding\n",
    "\n",
    "#### These methods are simple, make no assumptions and work generally well in different scenarios.\n",
    "\n",
    "#### There are however methods that allow us to capture information while pre-processing the labels of categorical variables. These methods include:\n",
    "\n",
    "#### .Ordering the labels according to the target\n",
    "#### .Replacing labels by the risk (of the target)\n",
    "#### .Replacing the labels by the joint probability of the target being 1 or 0\n",
    "#### .Weight of evidence."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Monotonicity\n",
    "#### All these methods create a monotonic relationship between the categorical variable and the target. A monotonic relationship is a relationship that does one of the following: (1) as the value of one variable increases, so does the value of the other variable; or (2) as the value of one variable increases, the other variable value decreases. In this case, as the value of the independent variable (predictor) increases, so does the target, or conversely, as the value of the variable increases, the target decreases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Cabin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>C85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>C123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived Cabin\n",
       "0         0   NaN\n",
       "1         1   C85\n",
       "2         1   NaN\n",
       "3         1  C123\n",
       "4         0   NaN"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('C:/Users/acer/Downloads/titanic/train.csv', usecols=['Cabin', 'Survived'])\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "148"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data.Cabin.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Cabin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived Cabin\n",
       "0         0     n\n",
       "1         1     C\n",
       "2         1     n\n",
       "3         1     C\n",
       "4         0     n"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Cabin'] =  data['Cabin'].astype(str).str[0]\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['n', 'C', 'E', 'G', 'D', 'A', 'B', 'F', 'T'], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Cabin.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Important\n",
    "\n",
    "#### The calculation of the probability ratios to replace the labels should be done considering ONLY on the training set, and then expanded it to the test set. See below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((623, 2), (268, 2))"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(data[['Cabin', 'Survived']],\n",
    "                                                    data.Survived, test_size=0.3,\n",
    "                                                    random_state=0)\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cabin\n",
       "A    0.428571\n",
       "B    0.774194\n",
       "C    0.571429\n",
       "D    0.692308\n",
       "E    0.740741\n",
       "F    0.666667\n",
       "G    0.500000\n",
       "T    0.000000\n",
       "n    0.303609\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.groupby(['Cabin'])['Survived'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>0.774194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>0.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>0.692308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>0.740741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n</th>\n",
       "      <td>0.303609</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Survived\n",
       "Cabin          \n",
       "A      0.428571\n",
       "B      0.774194\n",
       "C      0.571429\n",
       "D      0.692308\n",
       "E      0.740741\n",
       "F      0.666667\n",
       "G      0.500000\n",
       "T      0.000000\n",
       "n      0.303609"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prob_df = X_train.groupby(['Cabin'])['Survived'].mean()\n",
    "prob_df = pd.DataFrame(prob_df)\n",
    "prob_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Died</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.225806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>0.692308</td>\n",
       "      <td>0.307692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.259259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n</th>\n",
       "      <td>0.303609</td>\n",
       "      <td>0.696391</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Survived      Died\n",
       "Cabin                    \n",
       "A      0.428571  0.571429\n",
       "B      0.774194  0.225806\n",
       "C      0.571429  0.428571\n",
       "D      0.692308  0.307692\n",
       "E      0.740741  0.259259\n",
       "F      0.666667  0.333333\n",
       "G      0.500000  0.500000\n",
       "T      0.000000  1.000000\n",
       "n      0.303609  0.696391"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# probability of people who died.....\n",
    "\n",
    "prob_df = X_train.groupby(['Cabin'])['Survived'].mean()\n",
    "prob_df = pd.DataFrame(prob_df)\n",
    "prob_df['Died'] = 1-prob_df.Survived\n",
    "prob_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Died</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.225806</td>\n",
       "      <td>3.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>1.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>0.692308</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>2.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.259259</td>\n",
       "      <td>2.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n</th>\n",
       "      <td>0.303609</td>\n",
       "      <td>0.696391</td>\n",
       "      <td>0.435976</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Survived      Died     ratio\n",
       "Cabin                              \n",
       "A      0.428571  0.571429  0.750000\n",
       "B      0.774194  0.225806  3.428571\n",
       "C      0.571429  0.428571  1.333333\n",
       "D      0.692308  0.307692  2.250000\n",
       "E      0.740741  0.259259  2.857143\n",
       "F      0.666667  0.333333  2.000000\n",
       "G      0.500000  0.500000  1.000000\n",
       "T      0.000000  1.000000  0.000000\n",
       "n      0.303609  0.696391  0.435976"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# now the ratio of the survived v/s died\n",
    "\n",
    "prob_df['ratio'] = prob_df.Survived/prob_df.Died\n",
    "prob_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A': 0.75,\n",
       " 'B': 3.428571428571428,\n",
       " 'C': 1.3333333333333333,\n",
       " 'D': 2.25,\n",
       " 'E': 2.8571428571428563,\n",
       " 'F': 1.9999999999999998,\n",
       " 'G': 1.0,\n",
       " 'T': 0.0,\n",
       " 'n': 0.4359756097560975}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# let's make the dictionary of it\n",
    "\n",
    "prob_df['ratio'].to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "ordered_labels = prob_df['ratio'].to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train['Cabin_ordered'] = X_train.Cabin.map(ordered_labels)\n",
    "X_test['Cabin_ordered'] = X_test.Cabin.map(ordered_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Cabin_ordered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>857</th>\n",
       "      <td>E</td>\n",
       "      <td>1</td>\n",
       "      <td>2.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>D</td>\n",
       "      <td>1</td>\n",
       "      <td>2.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386</th>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "      <td>0.435976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>D</td>\n",
       "      <td>0</td>\n",
       "      <td>2.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>578</th>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "      <td>0.435976</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Cabin  Survived  Cabin_ordered\n",
       "857     E         1       2.857143\n",
       "52      D         1       2.250000\n",
       "386     n         0       0.435976\n",
       "124     D         0       2.250000\n",
       "578     n         0       0.435976"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "fig = X_train.groupby(['Cabin'])['Survived'].mean().plot()\n",
    "fig.set_title('Normal relationship between variable and target')\n",
    "fig.set_ylabel('Survived')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Survived')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The monotonic relationship between cabin_ordered and survived\n",
    "\n",
    "fig = plt.figure()\n",
    "fig = X_train.groupby(['Cabin_ordered'])['Survived'].mean().plot()\n",
    "fig.set_title('Monotonic relationship between variable and target')\n",
    "fig.set_ylabel('Survived')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### As you can see in the above plot, there is now a monotonic relationship between the variable Cabin and probability of survival. The higher the Cabin number, the more likely the person was to survive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
